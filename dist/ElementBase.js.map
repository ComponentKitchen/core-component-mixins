{"version":3,"sources":["../src/ElementBase.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;IAEM,WAAW;YAAX,WAAW;;WAAX,WAAW;0BAAX,WAAW;;+BAAX,WAAW;;;eAAX,WAAW;;;;WAGS,kCAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE;AACjD,UAAI,CAAC,GAAG,gBAAc,IAAI,oBAAe,QAAQ,CAAG,CAAC;;;;;;;;AAQrD,UAAI,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE;AAC3B,YAAI,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;OACvB;KACF;;;WAEc,2BAAG;AAChB,UAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACpB,UAAI,IAAI,CAAC,QAAQ,EAAE;AACjB,oCAA4B,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;OACnD;AACD,oCAA8B,CAAC,IAAI,CAAC,CAAC;KACtC;;;WAEE,aAAC,IAAI,EAAE;AACR,aAAO,CAAC,GAAG,CAAI,IAAI,CAAC,SAAS,UAAK,IAAI,CAAG,CAAC;KAC3C;;;SA3BG,WAAW;GAAS,WAAW;;AA+BrC,SAAS,4BAA4B,CAAC,OAAO,EAAE,QAAQ,EAAE;AACvD,MAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;;AAEhC,YAAQ,GAAG,2BAA2B,CAAC,QAAQ,CAAC,CAAC;GAClD;AACD,SAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;AACjD,SAAO,CAAC,IAAI,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;AAC1C,MAAI,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACxD,SAAO,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;CACjC;;AAED,SAAS,2BAA2B,CAAC,SAAS,EAAE;AAC9C,MAAI,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;;;;AAIlD,MAAI,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AACxC,KAAG,CAAC,SAAS,GAAG,SAAS,CAAC;AAC1B,SAAO,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;AAChC,YAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;GACjD;AACD,SAAO,QAAQ,CAAC;CACjB;;AAED,SAAS,WAAW;;;8BAAY;QAAX,GAAG;QAAE,IAAI;;;AAC5B,QAAI,CAAC,GAAG,EAAE;AACR,aAAO,KAAK,CAAC;KACd,MAAM,IAAI,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;AACnC,aAAO,IAAI,CAAC;KACb,MAAM;YACc,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC;YAAE,IAAI;;;KACpD;GACF;CAAA;;AAED,SAAS,8BAA8B,CAAC,OAAO,EAAE;AAC/C,IAAE,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,UAAC,SAAS,EAAK;AACjD,WAAO,CAAC,wBAAwB,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;GAC9E,CAAC,CAAC;CACJ;;AAED,QAAQ,CAAC,eAAe,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;;qBAEvC,WAAW","file":"ElementBase.js","sourcesContent":["/* Base class for defining custom elements. */\n\nclass ElementBase extends HTMLElement {\n\n  // Handle a change to the attribute with the given name.\n  attributeChangedCallback(name, oldValue, newValue) {\n    this.log(`attribute ${name} changed to ${newValue}`);\n    // If the attribute name corresponds to a property name, then set that\n    // property.\n    // TODO: This looks up the existence of the property each time. It would\n    // be more efficient to, e.g., do a one-time computation of all properties\n    // defined by the element (including base classes).\n    // TODO: Ignore standard attribute name.\n    // TODO: Map hyphenated foo-bar attribute names to camel case fooBar names.\n    if (hasProperty(this, name)) {\n      this[name] = newValue;\n    }\n  }\n\n  createdCallback() {\n    this.log(\"created\");\n    if (this.template) {\n      createShadowRootWithTemplate(this, this.template);\n    }\n    marshallAttributesToProperties(this);\n  }\n\n  log(text) {\n    console.log(`${this.localName}: ${text}`);\n  }\n\n}\n\nfunction createShadowRootWithTemplate(element, template) {\n  if (typeof template === 'string') {\n    // Upgrade plain string to real template.\n    template = createTemplateWithInnerHTML(template);\n  }\n  element.log(\"cloning template into shadow root\");\n  element.root = element.createShadowRoot();\n  let clone = document.importNode(template.content, true);\n  element.root.appendChild(clone);\n}\n\nfunction createTemplateWithInnerHTML(innerHTML) {\n  let template = document.createElement('template');\n  // REVIEW: Is there an easier way to do this?\n  // We'd like to just set innerHTML on the template content, but since it's\n  // a DocumentFragment, that doesn't work.\n  let div = document.createElement('div');\n  div.innerHTML = innerHTML;\n  while (div.childNodes.length > 0) {\n    template.content.appendChild(div.childNodes[0]);\n  }\n  return template;\n}\n\nfunction hasProperty(obj, name) {\n  if (!obj) {\n    return false;\n  } else if (obj.hasOwnProperty(name)) {\n    return true;\n  } else {\n    return hasProperty(Object.getPrototypeOf(obj), name);\n  }\n}\n\nfunction marshallAttributesToProperties(element) {\n  [].forEach.call(element.attributes, (attribute) => {\n    element.attributeChangedCallback(attribute.name, undefined, attribute.value);\n  });\n}\n\ndocument.registerElement('element-base', ElementBase);\n\nexport default ElementBase;\n"]}